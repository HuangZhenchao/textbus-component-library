import { ContentType, defineComponent, useState, VElement, onViewInit, useRef } from "@textbus/core";
import { useDragResize } from "@textbus/editor";
import { CesiumApp } from "./CesiumViewer/Viewer";
import { DateFormat } from "../../utils/Date";
const ak = '85dcab3699b288cd780476d37fa35805';
const CesiumData = {
    center: [100, 110],
    degrees: 15000,
    marks: [{}]
};
export const cesiumComponent = defineComponent({
    name: "cesiumComponent",
    type: ContentType.BlockComponent,
    setup(data) {
        let state = data.state;
        const changeController = useState(state);
        //useState({fill:false,type:'info',slot:slots.toJSON()})
        changeController.onChange.subscribe(newState => {
            state = newState;
            console.log('changeController', state);
        });
        const ref = useRef();
        useDragResize(ref, rect => {
            changeController.update(draft => {
                Object.assign(draft.style, rect);
            });
        });
        onViewInit(() => {
            var _a;
            var mapContainer = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.querySelector(".map-container");
            const cesium = new CesiumApp(window.Cesium, {});
            cesium.CreateViewer(mapContainer);
            console.log('onLoad', cesium, cesium.Cesium, window);
        });
        return {
            render(isOutputMode, slotRender) {
                let map;
                let zoom = 12;
                let id = 'map-container' + DateFormat("YYYYMMDDHHmmSS");
                console.log('id', id);
                const vEle = VElement.createElement("div", {
                    ref,
                    class: 'tb-cesiumMap',
                    style: state.style
                }, VElement.createElement('div', { id: id, class: "map-container" }));
                if (!isOutputMode && ref.current) {
                }
                //let map = new BMapGL.Map(mapContainer);
                //let point = new BMapGL.Point(116.404, 39.915); // 创建点坐标
                //map.centerAndZoom(point, 15);
                return vEle;
            }
        };
    }
});
export const cesiumComponentLoader = {
    component: cesiumComponent,
    match(element) {
        return element.tagName.toLowerCase() === 'div' && element.className === 'tb-cesiumMap';
    },
    read(element, context, slotParser) {
        const style = element.style;
        const state = {
            style: {},
            center: { x: 116.404, y: 39.915 },
            markers: [{ x: 116.404, y: 39.915 }],
            zoom: 16
        };
        //slotParser(state.slot,element)
        return cesiumComponent.createInstance(context, { state: state });
        //const component = new TodoListComponent(listConfig.map(i => i.slot));
    },
    resources: {
        scripts: ['http://106.55.148.203:801/Cesium/Cesium.js'],
        links: [{
                rel: 'stylesheet',
                href: 'http://106.55.148.203:801/Cesium/Widgets/widgets.css',
            }],
        styles: [
            `.tb-cesiumMap{
                min-width:600px;
                min-height: 400px;
                max-width:100%;
            }
            .map-container {
                display: block;
                width:100%;
                height:100%;
                background-color: #eee;
              }
              `
        ]
    },
};
//# sourceMappingURL=data:application/json;base64,