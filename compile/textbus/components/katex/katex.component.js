import { ContentType, defineComponent, useContext, useState, VElement, onContextMenu } from "@textbus/core";
import * as Katex from 'katex';
import { Dialog, Form } from "@textbus/editor";
import { FormTextareaColumn } from "../../utils/form/form-textarea-column";
function domToVDom(el) {
    const attrs = {};
    el.getAttributeNames().forEach(key => {
        attrs[key] = el.getAttribute(key);
    });
    return VElement.createElement(el.tagName.toLowerCase(), attrs, Array.from(el.childNodes).map(child => {
        if (child.nodeType === Node.ELEMENT_NODE) {
            return domToVDom(child);
        }
        return child.textContent;
    }));
}
const SetComponentOptions = function (block) {
    const katexComponentOptions = {
        name: block ? "katexBlockComponent" : "katexInlineComponent",
        type: block ? ContentType.BlockComponent : ContentType.InlineComponent,
        setup(data) {
            const injector = useContext();
            const dialog = injector.get(Dialog);
            let state = data.state;
            const changeController = useState(state);
            //useState({fill:false,type:'info',slot:slots.toJSON()})
            changeController.onChange.subscribe(newState => {
                state = newState;
            });
            const formTextareaItem = new FormTextareaColumn({
                name: 'source',
                placeholder: "输入LaTeX语法",
                label: '',
                value: state.source
            });
            formTextareaItem.input.style.width = "500px";
            formTextareaItem.input.style.height = "100px";
            const form = new Form({
                confirmBtnText: '确定',
                cancelBtnText: '关闭',
                items: [
                    formTextareaItem
                ]
            });
            form.onComplete.subscribe(map => {
                changeController.update(draft => {
                    draft.source = map['source'];
                    //draft.block=map.get('block');
                });
                dialog.hide();
                //console.log('component',alertState,instance.methods.toJSON())
            });
            form.onCancel.subscribe(() => {
                dialog.hide();
            });
            onContextMenu(() => {
                return [{
                        label: "公式设置",
                        onClick() {
                            dialog.show(form.elementRef);
                        }
                    }];
            });
            return {
                render(isOutputMode, slotRender) {
                    let htmlString;
                    try {
                        htmlString = Katex.renderToString(state.source, {
                            displayMode: block,
                            leqno: false,
                            fleqn: false,
                            throwOnError: true,
                            errorColor: '#cc0000',
                            strict: 'warn',
                            output: 'html',
                            trust: false,
                            //macros: { '\\f': '#1f(#2)' }
                        });
                    }
                    catch (e) {
                        console.log(e.stack); //.split('\n').join('<br>')
                        //htmlString = `<span style="color: red">${}</span>`;
                    }
                    const dom = new DOMParser().parseFromString(htmlString, 'text/html').body.children[0];
                    let el = new VElement('div', {
                        class: block ? 'tb-katex-block' : 'tb-katex-inline',
                        //style:{display:block?'block':'inline-block'},
                        source: encodeURIComponent(state.source)
                    }, dom ? [domToVDom(dom)] : []);
                    return el;
                }
            };
        }
    };
    return katexComponentOptions;
};
export const katexBlockComponent = defineComponent(SetComponentOptions(true));
export const katexInlineComponent = defineComponent(SetComponentOptions(false));
export const katexInlineComponentLoader = {
    component: katexInlineComponent,
    match(element) {
        return element.tagName.toLowerCase() === 'div' && (element.className === 'tb-katex-block' || element.className === 'tb-katex-inline');
    },
    read(element, context, slotParser) {
        const state = {
            source: element.getAttribute('source') || '',
            //block:element.style.display==='block'
        };
        if (element.className === 'tb-katex-block') {
            return katexBlockComponent.createInstance(context, { state: state });
        }
        else {
            return katexInlineComponent.createInstance(context, { state: state });
        }
        //const component = new TodoListComponent(listConfig.map(i => i.slot));
    },
    resources: {
        links: [{
                rel: 'stylesheet',
                //type:'text/css',
                href: 'https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css',
                //href:'./katex.min.css',
                //integrity: 'sha384-t5CR+zwDAROtph0PXGte6ia8heboACF9R5l/DiY+WZ3P2lxNgvJkQk5n7GPvLMYw',
                crossOrigin: 'anonymous'
            }],
        styles: [
            `.tb-katex-block{display: block}
            .tb-katex-inline{display: inline-block}
             .tb-katex-block,.tb-katex-inline{margin-left: 0.5em; margin-right: 0.5em}`
        ]
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2F0ZXguY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGV4dGJ1cy9jb21wb25lbnRzL2thdGV4L2thdGV4LmNvbXBvbmVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdILFdBQVcsRUFDWCxlQUFlLEVBRWYsVUFBVSxFQUFZLFFBQVEsRUFBRSxRQUFRLEVBQTZDLGFBQWEsRUFDckcsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQXdDLE1BQU0saUJBQWlCLENBQUM7QUFDckYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFNM0UsU0FBUyxTQUFTLENBQUMsRUFBVTtJQUN6QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2pDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNqRyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN0QyxPQUFPLFNBQVMsQ0FBQyxLQUFnQixDQUFDLENBQUM7U0FDdEM7UUFDRCxPQUFPLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNSLENBQUM7QUFDRCxNQUFNLG1CQUFt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QUE7SUFDdkksQ0FBQztJQUNELElBQUksQ0FBQyxPQUFvQixFQUFFLE9BQWlCLEVBQUUsVUFBc0I7UUFDaEUsTUFBTSxLQUFLLEdBQVk7WUFDbkIsTUFBTSxFQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUUsRUFBRTtZQUN6Qyx1Q0FBdUM7U0FDMUMsQ0FBQTtRQUNELElBQUcsT0FBTyxDQUFDLFNBQVMsS0FBSyxnQkFBZ0IsRUFBQztZQUN0QyxPQUFPLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUMsRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztTQUNwRTthQUFJO1lBQ0QsT0FBTyxvQkFBb0IsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFDLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7U0FDckU7UUFDRCx1RUFBdUU7SUFFM0UsQ0FBQztJQUVELFNBQVMsRUFBRTtRQUNQLEtBQUssRUFBQyxDQUFDO2dCQUNILEdBQUcsRUFBRSxZQUFZO2dCQUNqQixrQkFBa0I7Z0JBQ2xCLElBQUksRUFBRSw4REFBOEQ7Z0JBQ3BFLHlCQUF5QjtnQkFDekIsdUZBQXVGO2dCQUN2RixXQUFXLEVBQUUsV0FBVzthQUMzQixDQUFDO1FBQ0YsTUFBTSxFQUFFO1lBQ0o7O3VGQUUyRTtTQUM5RTtLQUNKO0NBQ0osQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBDb21wb25lbnRJbnN0YW5jZSxcclxuICAgIENvbXBvbmVudE1ldGhvZHMsXHJcbiAgICBDb250ZW50VHlwZSxcclxuICAgIGRlZmluZUNvbXBvbmVudCwgU2xvdCwgU2xvdFJlbmRlcixcclxuICAgIFRyYW5zbGF0b3IsXHJcbiAgICB1c2VDb250ZXh0LCB1c2VTbG90cywgdXNlU3RhdGUsIFZFbGVtZW50LFNlbGVjdGlvbiwgQ29tcG9uZW50T3B0aW9ucywgQ29tcG9uZW50RGF0YSwgb25Db250ZXh0TWVudVxyXG59IGZyb20gXCJAdGV4dGJ1cy9jb3JlXCI7XHJcbmltcG9ydCB7Q29tcG9uZW50TG9hZGVyLCBTbG90UGFyc2VyfSBmcm9tIFwiQHRleHRidXMvYnJvd3NlclwiO1xyXG5pbXBvcnQge0luamVjdG9yfSBmcm9tIFwiQHRhbmJvL2RpXCI7XHJcbmltcG9ydCAqIGFzIEthdGV4IGZyb20gJ2thdGV4JztcclxuaW1wb3J0IHsgRGlhbG9nLCBGb3JtLCBGb3JtU2VsZWN0LCBGb3JtU3dpdGNoLCBGb3JtVGV4dGFyZWEgfSBmcm9tIFwiQHRleHRidXMvZWRpdG9yXCI7XHJcbmltcG9ydCB7IEZvcm1UZXh0YXJlYUNvbHVtbiB9IGZyb20gXCIuLi8uLi91dGlscy9mb3JtL2Zvcm0tdGV4dGFyZWEtY29sdW1uXCI7XHJcbmV4cG9ydCBpbnRlcmZhY2Uga2F0ZXhTdGF0ZXtcclxuICAgIHNvdXJjZTpzdHJpbmcsXHJcbiAgICAvL2Jsb2NrOmJvb2xlYW5cclxufVxyXG5cclxuZnVuY3Rpb24gZG9tVG9WRG9tKGVsOkVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGF0dHJzID0ge307XHJcbiAgICBlbC5nZXRBdHRyaWJ1dGVOYW1lcygpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBhdHRyc1trZXldID0gZWwuZ2V0QXR0cmlidXRlKGtleSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBWRWxlbWVudC5jcmVhdGVFbGVtZW50KGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSwgYXR0cnMsIEFycmF5LmZyb20oZWwuY2hpbGROb2RlcykubWFwKGNoaWxkID0+IHtcclxuICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkb21Ub1ZEb20oY2hpbGQgYXMgRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjaGlsZC50ZXh0Q29udGVudDtcclxuICAgIH0pKTtcclxufVxyXG5jb25zdCBTZXRDb21wb25lbnRPcHRpb25zPWZ1bmN0aW9uKGJsb2NrOmJvb2xlYW4pOkNvbXBvbmVudE9wdGlvbnM8Q29tcG9uZW50TWV0aG9kcyxrYXRleFN0YXRlPntcclxuICAgIGNvbnN0IGthdGV4Q29tcG9uZW50T3B0aW9uczpDb21wb25lbnRPcHRpb25zPENvbXBvbmVudE1ldGhvZHMsa2F0ZXhTdGF0ZT49e1xyXG4gICAgICAgIG5hbWU6IGJsb2NrP1wia2F0ZXhCbG9ja0NvbXBvbmVudFwiOlwia2F0ZXhJbmxpbmVDb21wb25lbnRcIixcclxuICAgICAgICB0eXBlOiBibG9jaz9Db250ZW50VHlwZS5CbG9ja0NvbXBvbmVudDpDb250ZW50VHlwZS5JbmxpbmVDb21wb25lbnQsXHJcbiAgICAgICAgc2V0dXAoZGF0YTogQ29tcG9uZW50RGF0YTxrYXRleFN0YXRlPiApOiBDb21wb25lbnRNZXRob2RzIHtcclxuICAgICAgICAgICAgY29uc3QgaW5qZWN0b3IgPSB1c2VDb250ZXh0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZz1pbmplY3Rvci5nZXQoRGlhbG9nKVxyXG4gICAgICAgICAgICBsZXQgc3RhdGU9ZGF0YS5zdGF0ZSBhcyBrYXRleFN0YXRlO1xyXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VDb250cm9sbGVyPXVzZVN0YXRlKHN0YXRlKTtcclxuICAgICAgICAgICAgLy91c2VTdGF0ZSh7ZmlsbDpmYWxzZSx0eXBlOidpbmZvJyxzbG90OnNsb3RzLnRvSlNPTigpfSlcclxuICAgICAgICAgICAgY2hhbmdlQ29udHJvbGxlci5vbkNoYW5nZS5zdWJzY3JpYmUobmV3U3RhdGU9PntcclxuICAgICAgICAgICAgICAgIHN0YXRlPW5ld1N0YXRlO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBjb25zdCBmb3JtVGV4dGFyZWFJdGVtPW5ldyBGb3JtVGV4dGFyZWFDb2x1bW4oe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ3NvdXJjZScsXHJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCLovpPlhaVMYVRlWOivreazlVwiLFxyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICcnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHN0YXRlLnNvdXJjZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9ybVRleHRhcmVhSXRlbS5pbnB1dC5zdHlsZS53aWR0aD1cIjUwMHB4XCI7XHJcbiAgICAgICAgICAgIGZvcm1UZXh0YXJlYUl0ZW0uaW5wdXQuc3R5bGUuaGVpZ2h0PVwiMTAwcHhcIjtcclxuICAgICAgICAgICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtKHtcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdG5UZXh0OiAn56Gu5a6aJyxcclxuICAgICAgICAgICAgICAgIGNhbmNlbEJ0blRleHQ6J+WFs+mXrScsXHJcbiAgICAgICAgICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1UZXh0YXJlYUl0ZW1cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvcm0ub25Db21wbGV0ZS5zdWJzY3JpYmUobWFwID0+IHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZUNvbnRyb2xsZXIudXBkYXRlKGRyYWZ0PT57XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhZnQuc291cmNlPW1hcFsnc291cmNlJ107XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kcmFmdC5ibG9jaz1tYXAuZ2V0KCdibG9jaycpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGRpYWxvZy5oaWRlKClcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NvbXBvbmVudCcsYWxlcnRTdGF0ZSxpbnN0YW5jZS5tZXRob2RzLnRvSlNPTigpKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9ybS5vbkNhbmNlbC5zdWJzY3JpYmUoKCk9PntcclxuICAgICAgICAgICAgICAgIGRpYWxvZy5oaWRlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgb25Db250ZXh0TWVudSgoKT0+e1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6XCLlhazlvI/orr7nva5cIixcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZy5zaG93KGZvcm0uZWxlbWVudFJlZilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyKGlzT3V0cHV0TW9kZTpib29sZWFuLCBzbG90UmVuZGVyOlNsb3RSZW5kZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBodG1sU3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxTdHJpbmcgPSBLYXRleC5yZW5kZXJUb1N0cmluZyhzdGF0ZS5zb3VyY2UsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlNb2RlOiBibG9jayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlcW5vOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXFuOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93T25FcnJvcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ29sb3I6ICcjY2MwMDAwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmljdDogJ3dhcm4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiAnaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVzdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21hY3JvczogeyAnXFxcXGYnOiAnIzFmKCMyKScgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGU6YW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUuc3RhY2spLy8uc3BsaXQoJ1xcbicpLmpvaW4oJzxicj4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2h0bWxTdHJpbmcgPSBgPHNwYW4gc3R5bGU9XCJjb2xvcjogcmVkXCI+JHt9PC9zcGFuPmA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbSA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbFN0cmluZywgJ3RleHQvaHRtbCcpLmJvZHkuY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsPW5ldyBWRWxlbWVudCgnZGl2JywgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczpibG9jaz8ndGIta2F0ZXgtYmxvY2snOid0Yi1rYXRleC1pbmxpbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zdHlsZTp7ZGlzcGxheTpibG9jaz8nYmxvY2snOidpbmxpbmUtYmxvY2snfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogZW5jb2RlVVJJQ29tcG9uZW50KHN0YXRlLnNvdXJjZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbSA/IFtkb21Ub1ZEb20oZG9tKV0gOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGthdGV4Q29tcG9uZW50T3B0aW9ucztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGthdGV4QmxvY2tDb21wb25lbnQ9ZGVmaW5lQ29tcG9uZW50KFNldENvbXBvbmVudE9wdGlvbnModHJ1ZSkpXHJcbmV4cG9ydCBjb25zdCBrYXRleElubGluZUNvbXBvbmVudD1kZWZpbmVDb21wb25lbnQoU2V0Q29tcG9uZW50T3B0aW9ucyhmYWxzZSkpXHJcblxyXG5leHBvcnQgY29uc3Qga2F0ZXhJbmxpbmVDb21wb25lbnRMb2FkZXI6Q29tcG9uZW50TG9hZGVyPXtcclxuICAgIGNvbXBvbmVudDoga2F0ZXhJbmxpbmVDb21wb25lbnQsXHJcblxyXG4gICAgbWF0Y2goZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdkaXYnICYmIChlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3RiLWthdGV4LWJsb2NrJ3x8ZWxlbWVudC5jbGFzc05hbWUgPT09ICd0Yi1rYXRleC1pbmxpbmUnKVxyXG4gICAgfSxcclxuICAgIHJlYWQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRleHQ6IEluamVjdG9yLCBzbG90UGFyc2VyOiBTbG90UGFyc2VyKSA6Q29tcG9uZW50SW5zdGFuY2V7XHJcbiAgICAgICAgY29uc3Qgc3RhdGU6a2F0ZXhTdGF0ZT17XHJcbiAgICAgICAgICAgIHNvdXJjZTplbGVtZW50LmdldEF0dHJpYnV0ZSgnc291cmNlJyl8fCcnLFxyXG4gICAgICAgICAgICAvL2Jsb2NrOmVsZW1lbnQuc3R5bGUuZGlzcGxheT09PSdibG9jaydcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoZWxlbWVudC5jbGFzc05hbWUgPT09ICd0Yi1rYXRleC1ibG9jaycpe1xyXG4gICAgICAgICAgICByZXR1cm4ga2F0ZXhCbG9ja0NvbXBvbmVudC5jcmVhdGVJbnN0YW5jZShjb250ZXh0LHtzdGF0ZTpzdGF0ZX0pO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4ga2F0ZXhJbmxpbmVDb21wb25lbnQuY3JlYXRlSW5zdGFuY2UoY29udGV4dCx7c3RhdGU6c3RhdGV9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9jb25zdCBjb21wb25lbnQgPSBuZXcgVG9kb0xpc3RDb21wb25lbnQobGlzdENvbmZpZy5tYXAoaSA9PiBpLnNsb3QpKTtcclxuICAgICAgICBcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHJlc291cmNlczoge1xyXG4gICAgICAgIGxpbmtzOlt7XHJcbiAgICAgICAgICAgIHJlbDogJ3N0eWxlc2hlZXQnLFxyXG4gICAgICAgICAgICAvL3R5cGU6J3RleHQvY3NzJyxcclxuICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0va2F0ZXhAMC4xNS4yL2Rpc3Qva2F0ZXgubWluLmNzcycsXHJcbiAgICAgICAgICAgIC8vaHJlZjonLi9rYXRleC5taW4uY3NzJyxcclxuICAgICAgICAgICAgLy9pbnRlZ3JpdHk6ICdzaGEzODQtdDVDUit6d0RBUk90cGgwUFhHdGU2aWE4aGVib0FDRjlSNWwvRGlZK1daM1AybHhOZ3ZKa1FrNW43R1B2TE1ZdycsXHJcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJ1xyXG4gICAgICAgIH1dLFxyXG4gICAgICAgIHN0eWxlczogW1xyXG4gICAgICAgICAgICBgLnRiLWthdGV4LWJsb2Nre2Rpc3BsYXk6IGJsb2NrfVxyXG4gICAgICAgICAgICAudGIta2F0ZXgtaW5saW5le2Rpc3BsYXk6IGlubGluZS1ibG9ja31cclxuICAgICAgICAgICAgIC50Yi1rYXRleC1ibG9jaywudGIta2F0ZXgtaW5saW5le21hcmdpbi1sZWZ0OiAwLjVlbTsgbWFyZ2luLXJpZ2h0OiAwLjVlbX1gXHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxufVxyXG4iXX0=