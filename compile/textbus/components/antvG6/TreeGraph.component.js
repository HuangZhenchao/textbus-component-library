import { ContentType, defineComponent, useContext, useState, VElement, Selection, Renderer, useRef, useSelf, onViewInit } from "@textbus/core";
import G6 from "@antv/g6";
import "./TreeGraph/registerNode";
import { useDragResize } from "@textbus/editor";
import { DateFormat } from "../../utils/Date";
export const TreeGraphComponent = defineComponent({
    name: "TreeGraphComponent",
    type: ContentType.BlockComponent,
    setup(data) {
        let state = data.state;
        const changeController = useState(state);
        let injector = useContext();
        let render = injector.get(Renderer);
        let selection = injector.get(Selection);
        let instance = useSelf();
        //useState({fill:false,type:'info',slot:slots.toJSON()})
        changeController.onChange.subscribe(newState => {
            state = newState;
            console.log('changeController', state);
        });
        const ref = useRef();
        useDragResize(ref, rect => {
            changeController.update(draft => {
                Object.assign(draft.style, rect);
            });
        });
        onViewInit(() => {
            var InitG6TreeGraph = new Function("G6", "container", "data", state.code);
            InitG6TreeGraph(G6, ref.current, JSON.parse(state.data));
        });
        let scriptFlag = true;
        return {
            render(isOutputMode, slotRender) {
                console.log(state);
                let id = 'tree-graph-container' + DateFormat("YYYYMMDDHHmmSS");
                console.log('id', id);
                var childVElement;
                scriptFlag ? console.log("true\n\n") : console.log("false\n\n");
                const container = VElement.createElement('div', {
                    ref,
                    id: id,
                    class: "tb-graph",
                    style: state.style,
                    onClick: (e) => {
                        //let pSlot=instance.parent;
                        selection.selectComponent(instance);
                        //selection.setPosition(pSlot,0)
                        //selection.unSelect()
                        //selection.restore();
                        //selection.selectComponent(instance,true)
                        console.log("selectComponent");
                    }
                });
                if (!isOutputMode && ref.current) {
                    var refDom = ref.current;
                    //var canvas=refDom.querySelector("canvas")
                    state.style.width ? refDom.style.width = state.style.width : null,
                        state.style.height ? refDom.style.height = state.style.height : null;
                    refDom.innerHTML = "";
                    var InitG6TreeGraph = new Function("G6", "container", "data", state.code);
                    //var tgcontainer=document.getElementById(id)
                    InitG6TreeGraph(G6, refDom, JSON.parse(state.data));
                    console.log(refDom.style);
                }
                if (!isOutputMode) {
                    scriptFlag = !scriptFlag;
                }
                return container;
            }
        };
    }
});
export const TreeGraphComponentLoader = {
    component: TreeGraphComponent,
    match(element) {
        return element.tagName.toLowerCase() === 'div' && element.className === 'tb-graph';
    },
    read(element, context, slotParser) {
        const style = element.style;
        const state = {
            style: {},
            code: "",
            data: ""
        };
        //slotParser(state.slot,element)
        return TreeGraphComponent.createInstance(context, { state: state });
        //const component = new TodoListComponent(listConfig.map(i => i.slot));        
    },
    resources: {
        styles: [
            `.tb-graph {
                display: block;
                min-width:500px;
                min-height: 500px;
                max-width:100%;
                
                margin-bottom: 1em;
                background-color: #eee;
              }
              `
        ]
    },
};
//# sourceMappingURL=data:application/json;base64,